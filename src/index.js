/*
  I have found a few issues here.

  1. Make sure you are using the unique key names on any collection of components
  either generated by iteration, or populated in an array. React needs this key
  value to efficiently flag elements as being in need of update.

  2. The problem you were having with the 'editable' feature, was that you were
  not notifying the child element that a prop has changed. Children re-render
  automatically if the parent's *state* changes, but not necessarily if a prop
  is changed.

  componentWillReceiveProps can be used in this situation, to update the child
  component when a new prop is received.
*/

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
// import data from './albums.json';
import axios from 'axios'; //can use ES6 in React, not in Node yet (server.js is es5)
//create components
//class App extends React.Component {
//app component

class App extends React.Component {
  constructor() {
    super();
    this.state = {
      data: '',
    }
  }
  componentDidMount(){
  //called when React successfully renders the component
    axios.get('http://localhost:3001/getAlbumList').then(res => {
      //set the state to match the axios response
      console.log(res);
      this.setState({
        data: res.data,
      });
    });
  }
  render() {
    if (this.state.data) {
      return (
        <div className="container">
          <h1 className="center">Find your Tunes</h1>
          <Search data={this.state.data} />
          <Submit accordionId={1000} />
        </div>
      );
    }
    else {
      return (<h1 className="center">Cannot find album list</h1>);
    }
  }
}

//Submit Component
class Submit extends React.Component {
constructor() {
  super();
  this.state = {
    titleValue: "",
    artistValue: "",
    yearValue: "",
    genreValue: "",
    labelValue: "",
    trackValue: ""
  };
}

handleSubmit() {
  return;
}
  render(){
    return (
      <div className="column">
        <div className="accordion" id={'accordion-parent-'+this.props.accordionId}>
          <div className="card">
            <div className="card-header no-style center">
              <button className="btn no-style width" type="button"
              data-toggle="collapse" data-target={'#accordion-'+this.props.accordionId}
              aria-expanded="true" aria-controls={'#accordion-'+this.props.accordionId}>
                  <img className="cover-image" src="http://www.clker.com/cliparts/L/q/T/i/P/S/add-button-white-hi.png" alt=""/>
              </button><br/>
              <button className="btn btn-dark block" type="button" data-toggle="collapse"
              data-target={'#accordion-'+this.props.accordionId} aria-expanded="true"
              aria-controls={'#accordion-'+this.props.accordionId}>
                  Add new album
              </button>
            </div>

            <div id={'accordion-'+this.props.accordionId} className="collapse"
            data-parent={'#accordion-parent-'+this.props.accordionId}>
              <div className="card-body">
              <form>
                <ul className="info-list list-group list-group-flush">
                    <li class="list-group-item tool-tip">
                      <input id="input-title" name="textinput" type="text" placeholder="Title" class="form-control input-md" />
                    </li>
                    <li class="list-group-item tool-tip">
                      <input id="input-artist" name="textinput" type="text" placeholder="Artist" class="form-control input-md" />
                    </li>
                    <li class="list-group-item tool-tip">
                      <input id="input-year" name="textinput" type="number" placeholder="Year" class="form-control input-md" />
                    </li>
                    <li class="list-group-item tool-tip">
                      <input id="input-genre" name="textinput" type="text" placeholder="Genre" class="form-control input-md" />
                    </li>
                    <li class="list-group-item tool-tip">
                      <input id="input-label" name="textinput" type="text" placeholder="Label" class="form-control input-md" />
                    </li>
                    <li class="list-group-item tool-tip">
                      <input id="input-track" name="textinput" type="text" placeholder="Track 1" class="form-control input-md" />
                    </li>
                  </ul>
                  <button type="button" className="btn btn-success">Submit</button>
                  </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}


//search component
class Search extends React.Component {
  constructor(){
    super();
    this.state= {
      search: ''
    };
  }
  componentWillReceiveProps(newProp) {
    this.setState({
      data: newProp.data
    });
  }
  updateSearch(event){
    this.setState({search: event.target.value});
  }
  render() {
    let search = this.state.search.toLowerCase();
    let filterArtist = this.props.data.filter(
      (data) => {
        return (
          (data.artist.toLowerCase().indexOf(search) !== -1) ||
          (data.title.toLowerCase().indexOf(search) !== -1) ||
          (data.genre.toLowerCase().indexOf(search) !== -1) ||
          (data.label.toLowerCase().indexOf(search) !== -1) ||
          (data.year.toString().indexOf(search) !== -1)
        );
      }
    );
    return(
      <div>
        <div className="input-wrapper">
          <input className="form-control" type="text" placeholder="Search..." value={this.state.search}
          onChange={this.updateSearch.bind(this)}/>
        </div>
        <div className="row row-eq-height">
          {filterArtist.map((data, i) => {
          return <AlbumCard key={i} data={data} accordionId={i}/>
          })}
        </div>
      </div>
    );
  }
}

//Record Component (contains title, artist, genre, album art link, tracklist, release date, label, trackCount)
class AlbumCard extends React.Component {
  constructor(props) {
      super(props);
      this.state = {
        editing: false,
        accordionIsOpen: false
      }
  }
  toggleEdit = () => {
    console.log("toggleEdit has been triggered");
    this.setState((prevState) => ({
      editing: !prevState.editing
    }));
  }
  toggleShow = () => {
    this.setState((prevState) => ({
      accordionIsOpen: !prevState.accordionIsOpen
    }));
  }
  render() {
    var album = this.props.data;
    var showButton = album.title;
    if(this.state.accordionIsOpen){
      showButton = 'Hide';
    }
    var style = {
      backgroundImage:'url(' + album.album_img_link + ')',
    };
    return (
      <div className="column">
        <div className="accordion" id={'accordion-parent-'+this.props.accordionId}>
          <div className="card">
            <div className="card-header no-style center">
              <button className="btn no-style width" type="button"
              data-toggle="collapse" data-target={'#accordion-'+this.props.accordionId}
              aria-expanded="true" aria-controls={'#accordion-'+this.props.accordionId}
              onClick={this.toggleShow}>
                  <img className="cover-image" src={album.album_img_link} alt=""/>
              </button><br/>
              <button className="btn btn-dark block" type="button" data-toggle="collapse"
              data-target={'#accordion-'+this.props.accordionId} aria-expanded="true"
              aria-controls={'#accordion-'+this.props.accordionId} onClick={this.toggleShow}>
                  {showButton}
              </button>
            </div>

            <div id={'accordion-'+this.props.accordionId} className="collapse"
            data-parent={'#accordion-parent-'+this.props.accordionId}>
              <div className="card-body">
                <ul className="info-list list-group list-group-flush">
                    <li class="list-group-item tool-tip">
                      <h1><EditableField value={album.title} editing={this.state.editing}/></h1>
                    </li>
                    <li className="list-group-item tool-tip">
                      <h2><EditableField value={album.artist} editing={this.state.editing}/></h2>
                    </li>
                    <li className="list-group-item tool-tip">
                      <h3><EditableField value={album.year} editing={this.state.editing}/></h3>
                    </li>
                    <li className="list-group-item tool-tip">
                      <h3><EditableField value={album.genre} editing={this.state.editing}/></h3>
                    </li>
                    <li className="list-group-item tool-tip">
                      <h3><EditableField value={album.label} editing={this.state.editing}/></h3>
                    </li>
                    <li className="list-group-item tracklist">
                      <h3>Track List:</h3>
                      <ol>
                        {album.track_list.map((track,i) => {
                          return (
                            <li key={i}><EditableField key={i} value={track} editing={this.state.editing}/></li>
                          );
                        })}
                      </ol>
                    </li>
                  </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

class EditableField extends React.Component {
  constructor(props){
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);

    /*
      From: https://stackoverflow.com/questions/41233458/react-child-component-not-updating-after-parent-state-change

      "Passing the intial state to a component as a prop is an anti-pattern
      because the getInitialState (in our case the constuctor) method is only
      called the first time the component renders. Never more. Meaning that,
      if you re-render that component passing a different value as a prop,
      the component will not react accordingly, because the component will
      keep the state from the first time it was rendered. It's very error prone."


    */

    this.state = {
      value: props.value,
      editing: props.editing
    }
  }

  /*
    Since the constructor is only called once, at the instantiation of the object,
    we have to tell react that we need to watch for incoming props
  */
  componentWillReceiveProps(newProp) {
    this.setState({
      editing: newProp.editing,
      value: newProp.value
    });
  }

  toggleEdit = () => {
    this.setState(prevState => ({
      editing: !prevState.editing
    }));
  }

  handleChange(event) {
    this.setState({formValue: event.target.value});
  }

  handleSubmit(event) {
    if (this.state.formValue){
      this.setState({value: this.state.formValue});
    }
    this.toggleEdit();
    event.preventDefault();

  }

  render() {
    if (this.state.editing){
      return (
        <form onSubmit={this.handleSubmit}>
          <label>
            <input className="form-control" type="text" placeholder={this.state.value} value={this.state.formValue} onChange={this.handleChange} />
          </label><br/>
          <input className="btn btn-success button-space" type="submit" value="Submit" />
          <button type="button" className="btn btn-danger button-space" onClick={this.toggleEdit}>Cancel</button>
        </form>
      );
    } else {
      return (
        <div>
          {this.state.value}
          <button className="transparent change" onClick={this.toggleEdit}>
            <img src="https://www.impetus.com/sites/default/files/plus.png" width="8"/>
          </button>
        </div>
      );
    }
  }
}
//Dom Render
//data={data}
ReactDOM.render(
 <App />,
 document.getElementById('root')
);
